<?php 
// $Id$

/* TODO FormAPI image buttons are now supported.
   FormAPI now offers the 'image_button' element type, allowing developers to
   use icons or other custom images in place of traditional HTML submit buttons.

$form['my_image_button'] = array(
  '#type'         => 'image_button',
  '#title'        => t('My button'),
  '#return_value' => 'my_data',
  '#src'          => 'my/image/path.jpg',
); */

/* TODO Remove db_num_rows() method
   The db_num_rows() method was removed from the database abstraction layer in
   6.x core, as it was a database dependent method. Developers need to use other
   handling to replace the needs of this method. */

/* TODO Change 'Submit' to 'Save' on buttons
   It has been agreed on that the description 'Submit' for a button is not a
   good choice since it does not indicate what actually happens. While for
   example on node editing forms, 'Preview' and 'Delete' describe exactly what
   will happen when the user clicks on the button, 'Submit' only gives a vague
   idea. When labelling your buttons, make sure that it is clear what this
   button does when the user clicks on it. */

/* TODO New user_mail_tokens() method may be useful.
   user.module now provides a user_mail_tokens() function to return an array
   of the tokens available for the email notification messages it sends when
   accounts are created, activated, blocked, etc. Contributed modules that
   wish to make use of the same tokens for their own needs are encouraged
   to use this function. */

/* TODO
   There is a new hook_watchdog in core. This means that contributed modules
   can implement hook_watchdog to log Drupal events to custom destinations.
   Two core modules are included, dblog.module (formerly known as watchdog.module),
   and syslog.module. Other modules in contrib include an emaillog.module,
   included in the logging_alerts module. See syslog or emaillog for an
   example on how to implement hook_watchdog.
function example_watchdog($log = array()) {
  if ($log['severity'] == WATCHDOG_ALERT) {
    mysms_send($log['user']->uid,
      $log['type'],
      $log['message'],
      $log['variables'],
      $log['severity'],
      $log['referer'],
      $log['ip'],
      format_date($log['timestamp']));
  }
} */

/* TODO Implement the hook_theme registry. Combine all theme registry entries
   into one hook_theme function in each corresponding module file.
function gopubmed_theme() {
  return array(
  );
} */

/**
 * @file
 * gopubmed.module for Drupal
 *
 * As part of implementation of CMS for Biomedical applications, it is often a requirement to display publications
 * from well known databases. One such database is called PubMed which is provided National Center for Biotechnology
 * Information, National Library of Medicine and National Institutes of Health. PubMed includes bibliographic
 * information from MEDLINE, which contains over 17 million citations from life science journals for biomedical
 * articles dating back to the 1950s.

 * In a Drupal CMS implementation, currently there is no support to pull data from PubMed. The existing bibliography
 * module for presenting publication information accepts input formats of RIS, bibText. The current XML output
 * from Pubmed cannot be fed to biblio module directly for display.

 * GoPubMed Module pulls data from pubmed directly and creates bibtext file and using biblio module, GoPubMed module
 * import this bibtext file directly to drupal site and creates biblio node.

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 
 * Sponsored by Joslin Diabetes Center, Harvard Medical School
 * Originally developed by Zaloni (http://www.zaloni.com)
 * Upgraded to Drupal 6 by Agaric Design Collective, http://AgaricDesign.com/
 * Sponsored by the Science Collaboration Framework project, http://sciencecollaboration.org/
 */

/**
* Implementation of hook_help().
*
* Throughout Drupal, hook_help() is used to display help text at the top of
* pages. Some other parts of Drupal pages get explanatory text from these hooks
* as well. We use it here to provide a description of the module on the
* module administration page.
*/
function gopubmed_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      $output = '<p>'. t('Help text need to be added');
      return $output;
  }
}

/**
 * Implementation of hook_perm
 */
function gopubmed_perm() {
  return array('administer gopubmed');
}

/**
 * Implementation of hook_menu
 */
function gopubmed_menu() { 
  $items = array();
  
  $items['admin/settings/gopubmed/add'] = array(
    'title' => 'GoPubMed New Search Term',
    'description' => 'Create blocks of latest content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gopubmed_add'),
    'access arguments' => array('administer gopubmed'),
    'type' => MENU_LOCAL_TASK);
  $items['admin/settings/gopubmed/list'] = array(
    'title' => 'GoPubMed List Search Term',
    'description' => 'Create blocks of latest content',
    'page callback' => 'gopubmed_list',
    'access arguments' => array('administer gopubmed'),
    'type' => MENU_LOCAL_TASK);
  $items['admin/settings/gopubmed/edit/%'] = array(
    'title' => 'Edit Term',
    'description' => 'Create blocks of latest content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gopubmed_edit',arg(4)),
    'access arguments' => array('administer gopubmed'),
    'type' => MENU_CALLBACK);
  $items['admin/settings/gopubmed/delete/'.'%'] = array(
    'title' => 'Edit Term',
    'description' => 'Create blocks of latest content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gopubmed_delete',arg(4)),
    'access arguments' => array('administer gopubmed'),
    'type' => MENU_CALLBACK);

  return $items; 
}

/*
 * Adding gopubmed search term
 **/
function gopubmed_add() {
  $form = array();

  $form['settings_general'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add News Items'),
    '#collapsible' => TRUE
  );
  $form['settings_general']['gopubmed_term'] = array(
    '#title' => t('GoPubMed Search Term'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' =>25,
    '#default_value' => t('')
  );
  $form['settings_general']['gopubmed_num'] = array(
    '#title' => t('Number Of Item'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' =>25,
    '#default_value' => t('')
  );
  $form['settings_general']['submit']['gopubmed_add_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );

  return $form; 
}

/*
 * Submit gopubmed search term
 **/
function gopubmed_add_submit($form, &$form_state) {
  $term = $form_state['values']['gopubmed_term'];
  $num  = $form_state['values']['gopubmed_num'];
  if($num == "")
    $num = 10;
  $query = db_query("INSERT INTO `gopubmed_term` (`term`, `num`) VALUES ('$term','$num')");
  
  $form_state['redirect'] = 'admin/settings/gopubmed/list';
}

/*
 * Listing gopubmed search term
 **/
function gopubmed_list() {
  $query = db_query('SELECT * FROM `gopubmed_term`');
  $output ='<table border=1 height=100px width=500px align=center><tr><td align=center><h3>Terms</h3></td><td align=center><h3>Number of Item</h3></td><td align="center">Action</td></tr>';
  while ($dbresult = db_fetch_array($query)) {
    $output .= "<tr><td align=center>".$dbresult['term']."</td><td align=center>".$dbresult['num']."</td><td align=center><a href='".base_path()."admin/settings/gopubmed/edit/".$dbresult['term_id']."'>Edit</a>|<a href='".base_path()."admin/settings/gopubmed/delete/".$dbresult['term_id']."'>Delete</a></td></tr>";
  }
  $output .='</table>';

  return t($output);
}

/*
 * Editing gopubmed search term
 **/
function gopubmed_edit($id = array()) {
  $query = db_query('SELECT `term`, `num` FROM `gopubmed_term` WHERE `term_id` ='.$id);
  $dbresult = db_fetch_object($query);
  $term = $dbresult->term;
  $num  = $dbresult->num;

  $form = array();

  $form['settings_general'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add News Items'),
    '#collapsible' => TRUE
  );
  $form['settings_general']['gopubmed_term'] = array(
    '#title' => t('GoPubMed Search Term'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' =>25,
    '#default_value' => t($term)
  );
  $form['settings_general']['gopubmed_id'] = array(
    '#type' => 'hidden',
    '#default_value' => t($id)
  );
  $form['settings_general']['gopubmed_num'] = array(
    '#title' => t('Number Of Item'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' =>25,
    '#default_value' => t($num)
  );
  $form['settings_general']['submit']['gopubmed_edit_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  
  return $form; 
}

/*
 * Submit edited gopubmed search term
 **/
function gopubmed_edit_submit($form, &$form_state) {
  $term = $form_state['values']['gopubmed_term'];
  $num  = $form_state['values']['gopubmed_num'];
  if($num == "")
    $num = 10;
  $id   = $form_state['values']['gopubmed_id'];
  $query = db_query("UPDATE `gopubmed_term` SET `term` = '".$term."', `num` = '".$num."' WHERE `term_id` =".$id);
  
  return 'admin/settings/gopubmed/list';
}

/*
 * Deleting gopubmed search term
 **/
function gopubmed_delete($id = array()) {
  $query = db_query('SELECT `term` FROM `gopubmed_term` WHERE `term_id` ='.$id);
  $dbresult = db_fetch_object($query);
  $term = $dbresult->term;

  $form = array();
  $form['settings_general']['gopubmed_id'] = array(
    '#type' => 'hidden',
    '#default_value' => t($id)
  );
  $form['settings_general']['submit']['gopubmed_form_submit'] = array(
    '#type' => 'submit',
    '#title' =>t('Are you sure to delete'.$term),
    '#value' => t('Delete')
  );

  return $form;
}

/*
 * Submit deleted gopubmed search term
 **/
function gopubmed_delete_submit($form, &$form_state) {
  $id = $form_state['values']['gopubmed_id'];
  $query = db_query("DELETE FROM `gopubmed_term` WHERE `term_id` =".$id);
  
  return 'admin/settings/gopubmed/list';
}

/**
 * Implementation of hook_cron().
 */
function gopubmed_cron() {
  /***Deleting old biblio nodes***/
  //$aquery= db_query("SELECT `nid` FROM `node` WHERE type = 'biblio'");
  //while ($row = db_fetch_array($aquery)) {
    //node_delete($row['nid']);
  //}
  
  gopubmed_import();
  
  /****Now deleting the duplicate entry****/
  $title_arr = array();
  $sql = db_query("SELECT title FROM {node} WHERE type = 'biblio'");
  while ($dbresult = db_fetch_array($sql)) {
    $title_arr[] = addslashes($dbresult['title']);    
  }
  foreach ($title_arr as $val) {
    $cnt = db_result(db_query("SELECT COUNT(nid) FROM {node} WHERE title = '$val' AND type = 'biblio'"));
    if ($cnt > 1) {
      $sql_count = db_query("SELECT nid FROM {node} WHERE title = '$val' AND type = 'biblio'");
      while ($row = db_fetch_array($sql_count)) {
        if($cnt!=1) {
          node_delete($row['nid']);
        }
        $cnt--;
      }
    }
  }
}

/*
 * Creating the pubmed.bib file and importing the pubmed.bib file to biblio module.
 **/
function gopubmed_import() {
  /***Getting pubmed term***/
  $gopubmed_sql = db_query("Select * From `gopubmed_term` Where `term`!=''");
  
  while ($dbresult = db_fetch_array($gopubmed_sql)) {
    $search_term = $dbresult['term'];
    $search_term = str_replace(" ","+",$search_term);
    $search_term = strtolower($search_term);
    $num_term    = $dbresult['num'];
      
    if($num_term == "")
      $num_term = 10;
    $db   = "pubmed";
    watchdog('gopubmed', "Search term is1: ".$search_term, NULL, WATCHDOG_INFO);
    
    /*
    * ESearch searches and retrieves primary IDs (for use in EFetch, ELink, and ESummary) and term translations
    * and optionally retains results for future use in the user's environment.
    */
    $esearch_url = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=$db&retmax=$num_term&term=$search_term";
    watchdog('gopubmed', "Querying the pubmed server: .<br />".$esearch_url, WATCHDOG_INFO);
    $esearch_load = simplexml_load_file($esearch_url);
    foreach ($esearch_load->xpath("//Id") as $primaryId) {
      $sql_pmid = db_result(db_query("Select COUNT(*) from `biblio` Where `biblio_custom3` = '$primaryId'"));
      if($sql_pmid == 0) {
        watchdog('gopubmed', "This is new primary ID: ". $primaryId, WATCHDOG_INFO);
        /*
        * ESummary Retrieves document summaries from a list of primary IDs which we got from the ESearch
        **/
        $esummary_url = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=$db&id=$primaryId&retmode=xml";
        $esummary_load = simplexml_load_file($esummary_url);
        $summaryid = $esummary_load->DocSum[0]->Id;
      
        /***Now creating the pubmed.bib file***/
        $article_bib .= '@article{' . $summaryid . ',' . "\n";

        foreach ($esummary_load->DocSum[0]->Item as $summary) {
	  $authorlist="";
          $author_all="";
          if($summary['Name'] == "AuthorList") {
            foreach ($summary->Item as $authorlist) {
              $author_all .=  $authorlist . ' , '. "\n";
            }
            $article_bib .= 'author = {' . $author_all . '},'. "\n";
          }
          else {
            if($summary['Name'] == "Author")
              $article_bib .= 'author = {' . $summary . '},'. "\n";
          }
          if($summary['Name'] == "Title")
            $title           = $summary;
          else if($summary['Name'] == "PubDate")
            $pubdate         = $summary;
          else if($summary['Name'] == "ePubDate")
            $epubdate        = $summary;
          else if($summary['Name'] == "Source")
            $journal         = $summary;
          else if($summary['Name'] == "Volume")
            $volume          = $summary;
          else if($summary['Name'] == "Pages")
            $pages	     = $summary;
          else if($summary['Name'] == "Issue")
            $issue           = $summary;
          else if($summary['Name'] == "Pagination")
            $pagination      = $summary;
          else if($summary['Name'] == "PmId")
            $pmid            = $summary;
          else if($summary['Name'] == "SortDate")
            $sortdate        = $summary;
          else if($summary['Name'] == "Links")
            $links           = $summary;
          else if($summary['Name'] == "PmcLiveDate")
            $pmclivedate     = $summary;
          else if($summary['Name'] == "Abstract")
            $Abstract        = $summary;
          else if($summary['Name'] == "XmlData")
            $xmldata         = $summary;
          else if($summary['Name'] == "FullJournalName")
            $fullJournalName = $summary;
        
          if($fullJournalName == "")
            $journalname = $journal;
          else
            $journalname = $fullJournalName;
        }
          
        /*
         * Now getting the full article link through ELink.
         * ELink Checks for the existence of an external or Related Articles link from a list of one or more primary
         * IDs.  Retrieves primary IDs and relevancy scores for links to Entrez databases or Related Articles;  creates
         * a hyperlink to the primary LinkOut provider for a specific ID and database, or lists LinkOut URLs and
         * Attributes for multiple IDs
         **/
        $llink_url = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/elink.fcgi?dbfrom=pubmed&id=$primaryId&cmd=prlinks";
        $llink_load = simplexml_load_file($llink_url);
        $llink_array = $llink_load->ObjUrl->xpath("//Url");
        $article_link = $llink_array[0];
          
        /***Creating pubmed url***/
        $custom1 = "http://www.ncbi.nlm.nih.gov/pubmed/$primaryId?dopt=Abstract";
        
        /*
         * Getting abstract through EFetch.
         * Retrieves records in the requested format from a list of one or more primary IDs or from the user's
         * environment.
         **/
        $efetch = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=$primaryId&retmode=xml";
        $efetch_load = simplexml_load_file($efetch);
      
        $abstract = $efetch_load->Abstract->xpath("//AbstractText");
        $final_abstract = $abstract[0];
        
        $title = str_replace("{"," ",$title);
        $title = str_replace("}"," ",$title);
        
        $article_bib .= 'title = {' . $title  . '},'. "\n";
        $article_bib .= 'year = {' . $pubdate . '},'. "\n";
        $article_bib .= 'journal = {' . $journalname . '},'. "\n";
        $article_bib .= 'volume = {' . $volume . '},'. "\n";
        if($number !=''){$article_bib .= 'number = {' . $number . '},'. "\n";}
        $article_bib .= 'pages={' . $pages . '},'. "\n";
        if($note !=''){$article_bib .= 'note = {' . $note . ' Additional Keywords: ' . $keywordlist . '},'. "\n";}
        $article_bib .= 'keywords = {' . $keywords . '},'. "\n";  
        $article_bib .= 'isbn={' . $isbn . '},'. "\n";
        $article_bib .= 'language = {' . $language . '},'. "\n";
        $article_bib .= 'abstract = {' . $final_abstract . '},'. "\n";
        $article_bib .= 'url = {' . $article_link . '},' . "\n";
        $article_bib .= 'custom1 = {' . $custom1 . '},' . "\n";
        $article_bib .= 'custom2 = {' . $search_term . '},' . "\n";
        $article_bib .= 'custom3 = {' . $primaryId . '}' . "\n";
        $article_bib .= '}';
  
        $x++;                  
      }
      else {
        watchdog('gopubmed1', "Publication not entered. PMID: .<br />".$primaryId . " Already there.", WATCHDOG_INFO);
      }
    }
    $bibtex_filename = drupal_get_path('module', 'gopubmed') . '/'.$term.'pubmed.bib';
    
    if (!$handle = fopen($bibtex_filename, 'w+')) {
      printf("Cannot open file (%s)", $bibtex_filename);
      exit;
    }
    
    if (fwrite($handle, $article_bib) === FALSE) {
      printf("Cannot write to (%s)", $bibtex_filename);
      exit;
    }
    
    fclose($handle);
   }
    /***Importing pubmed.bib file to biblio module****/
    $content = _gopubmed_import("1", $bibtex_filename, "bib", $terms);
  
}

/*
 * Importing pubmed.bib file to biblio module which will create biblio node.
 **/
function _gopubmed_import($userid = 1, $filename = null, $type = 'bib', $terms = null) {
  global $user;
  $node = array();
  $node_ids = "";

  if (file_exists($filename)) {
    if (($file_content = @file_get_contents($filename)) === false) {
      return false;
    }
    else {
      $options = variable_get('node_options_biblio',array('status'));
      if (module_exists('i18n') && variable_get('i18n_node_biblio',0)){
        $node['language'] = module_invoke('i18n','default_language');
      }
      $node['type']     = "biblio";
      $node['created']  = time();
      $node['changed']  = time();
      $node['comment']  = variable_get('comment_biblio', 0);
      $node['promote']  = in_array('promote',$options);
      $node['moderate'] = in_array('moderate',$options);
      $node['sticky']   = in_array('sticky',$options);
      $node['format']   = 0;
      $node['status']   = in_array('status',$options);
      $node['uid']      = $userid;
          
      $node_ids  = _pubbibtex_import($file_content, $node);
      
      if ($terms && count($node_ids)) {
        // set the vocabulary for the returned nodes
        foreach ($node_ids as $node_id) {
          module_invoke('taxonomy', 'node_save', $node_id,  $terms);
        }
      }
      return $node_ids;
    }
  }
  else {
    return false;
  }
}

function _pubbibtex_import(&$data, $node) {
  module_load_include('inc', 'biblio', 'biblio.import.export');
  module_load_include('php', 'biblio', 'bibtexParse/PARSEENTRIES');
  $node_array = array();

  $bibtex = new PARSEENTRIES();
  $bibtex->loadBibtexString($data);
  $bibtex->extractEntries();
    
  if ($bibtex->count) {
    $bibtex->bib2node($node_array, $node);
    $node_ids = biblio_save_imported_nodes($node_array);
  }
  return $node_ids;
}
?>
