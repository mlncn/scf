<?php
// $Id: privacy.module,v 1.1 2009/01/28 23:38:34 cptncauliflower Exp $

/**
 * @file
 * Define which cck fields should be able to keep private.
 */

/**
 * Implementation of hook_perm().
 */
function privacy_perm() {
  return array(
    'administer privacy',
    'view all privacy',
  );
}

/**
 * Implementation of hook_menu().
 */
function privacy_menu() {
  $items = array();

  $items['admin/content/privacy'] = array(
    'title' => 'Content privacy',
    'description' => t('Privacy settings per field'),
    'page callback' => t('privacy_adminpage'),
    'file' => 'privacy.admin.inc',
    'access arguments' => array('administer privacy'),
  );

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function privacy_form_alter(&$form, &$form_state, $form_id) {
  //only node forms
  if ( $form['#id'] == 'node-form') {
    $type = $form['type']['#value'];
    $active_privacy_fields = privacy_get_active_fields($type);
    //when active privacy fields => form alter
    foreach ($active_privacy_fields as $field) {
      privacy_form_alter_field($form, $field);
    }
  }
}

/*
 * Form alter a specific field
 */
function privacy_form_alter_field(&$form, $field) {
  //get fieldset info
  $fieldset = $form['#field_info'][$field]['display_settings']['parent'];

  //get weight info
  $weight = $form['#field_info'][$field]['widget']['weight'];
  if (!$weight) $weight = $form['#field_info'][$field]['display_settings']['weight'];

  //get nid
  $nid = ($form['nid']['#value'] != '') ? $form['nid']['#value'] : 0;

  //get label
  $label = $form['#field_info'][$field]['widget']['label'];

  //create privacy field settings
  $subform = array(
    '#type'    => 'checkbox',
    '#title'   => t('Don\'t show !label in public', array('!label' => $label)),
    '#weight'  => ($weight + 0.01),
    '#default_value' => privacy_is_private($field, $nid),
  );

  if ( $fieldset != '' ) {
    $form[$fieldset]['privacy_'. $field] = $subform;
  }
  else {
    $form['privacy_'. $field] = $subform;
  }
}

function privacy_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;

  switch ($op) {
    case 'insert':
    case 'update':
      $active_privacy_fields = privacy_get_active_fields($node->type);
      foreach ($active_privacy_fields as $field) {
        db_query("DELETE FROM {privacy} WHERE nid = %d AND field_name = '%s'", $node->nid, $field);
        $fieldname = 'privacy_'. $field;
        if ( $node->$fieldname == 1 ) {
          db_query("INSERT INTO {privacy} (nid, field_name) VALUES (%d, '%s')", $node->nid, $field);
        }
      }
      break;
    case 'load':
      $result = db_query("SELECT field_name FROM {privacy} WHERE nid = %d ", $node->nid);
      //zijn er privacy velden geactiveerd ?
      if ($result) {
        $active_privacy_fields = privacy_get_active_fields($node->type);
        //indien toegang tot privacy velden => privacy status meegeven in een node_load
        if ($user->uid == $node->uid || user_access('view all privacy')) {
          //alle veldjes op zichtbaar
          $flip = array_flip($active_privacy_fields);
          foreach ($flip as $field => $value) {
            $flip[$field] = 0;
          }
          //alle privacy velden verberge
          while ($permissions = db_fetch_object($result)) {
            $flip[$permissions->field_name] = 1;
          }
          //alle velden in $node object zetten
          foreach ($flip as $field => $value) {
            $fieldname = 'privacy_'. $field;
            $node->$fieldname = $value;
          }
        }
        //indien geen toegang tot privacy velden => velden verwijderen
        else {
          while ($permissions = db_fetch_object($result)) {
            $field = $permissions->field_name;
            //veld staat op private
            if (in_array($field, $active_privacy_fields)) {
              unset($node->$field);
            }
          }
        }
      }
      break;
  }
}

/**
 * Return an array with all acitve privacy fields
 */
function privacy_get_active_fields($type) {
  static $active_privacy_fields = array();

  if (!isset($active_privacy_fields[$type])) {
    $active_privacy_fields[$type] = array();
    $all_privacy_fields = variable_get('privacy_'. $type, array());

    foreach ( $all_privacy_fields as $field ) {
      if ($field !== 0) {
        $active_privacy_fields[$type][] = $field;
      }
    }
  }

  return $active_privacy_fields[$type];
}

function privacy_is_private($field, $nid) {
  if ( $nid == 0 ) {
    return FALSE;
  }
  else {
    $result = db_result(db_query("SELECT nid FROM {privacy} WHERE nid = %d AND field_name = '%s' ", $nid, $field));
    if ( $result ) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}
