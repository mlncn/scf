<?php
/**
 * @file entrez.module
 */

/**
 * Data is ultimately saved by a drupal_write_record() in the node hooks
 * (hook_insert and hook_update) of biblio.module, so all that is needed to
 * save an additional piece of information is to add it to the $b array keyed
 * with the name of a column from the {biblio} table.

 * What are these column names?  We thought you'd never ask:
 +-----------------------------+--------------+------+-----+---------+-------+
 | Field                       | Type         | Null | Key | Default | Extra |
 +-----------------------------+--------------+------+-----+---------+-------+
 | nid                         | int(11)      | NO   | MUL | 0       |       |
 | vid                         | int(11)      | NO   | PRI | 0       |       |
 | biblio_type                 | int(11)      | NO   |     | 0       |       |
 | biblio_number               | varchar(24)  | YES  |     | NULL    |       |
 | biblio_other_number         | varchar(24)  | YES  |     | NULL    |       |
 | biblio_secondary_title      | varchar(255) | YES  |     | NULL    |       |
 | biblio_tertiary_title       | varchar(255) | YES  |     | NULL    |       |
 | biblio_edition              | varchar(255) | YES  |     | NULL    |       |
 | biblio_publisher            | varchar(255) | YES  |     | NULL    |       |
 | biblio_place_published      | varchar(255) | YES  |     | NULL    |       |
 | biblio_year                 | int(11)      | NO   | MUL | 9999    |       |
 | biblio_volume               | varchar(24)  | YES  |     | NULL    |       |
 | biblio_pages                | varchar(128) | YES  |     | NULL    |       |
 | biblio_date                 | varchar(16)  | YES  |     | NULL    |       |
 | biblio_isbn                 | varchar(24)  | YES  |     | NULL    |       |
 | biblio_lang                 | varchar(24)  | YES  |     | eng     |       |
 | biblio_abst_e               | text         | YES  |     | NULL    |       |
 | biblio_abst_f               | text         | YES  |     | NULL    |       |
 | biblio_full_text            | int(11)      | YES  |     | 0       |       |
 | biblio_url                  | varchar(255) | YES  |     | NULL    |       |
 | biblio_issue                | varchar(24)  | YES  |     | NULL    |       |
 | biblio_type_of_work         | varchar(100) | YES  |     | NULL    |       |
 | biblio_accession_number     | varchar(30)  | YES  |     | NULL    |       |
 | biblio_call_number          | varchar(30)  | YES  |     | NULL    |       |
 | biblio_notes                | text         | YES  |     | NULL    |       |
 | biblio_custom1              | text         | YES  |     | NULL    |       |
 | biblio_custom2              | text         | YES  |     | NULL    |       |
 | biblio_custom3              | text         | YES  |     | NULL    |       |
 | biblio_custom4              | text         | YES  |     | NULL    |       |
 | biblio_custom5              | text         | YES  |     | NULL    |       |
 | biblio_custom6              | text         | YES  |     | NULL    |       |
 | biblio_custom7              | text         | YES  |     | NULL    |       |
 | biblio_research_notes       | text         | YES  |     | NULL    |       |
 | biblio_number_of_volumes    | varchar(24)  | YES  |     | NULL    |       |
 | biblio_short_title          | varchar(255) | YES  |     | NULL    |       |
 | biblio_alternate_title      | varchar(255) | YES  |     | NULL    |       |
 | biblio_original_publication | varchar(255) | YES  |     | NULL    |       |
 | biblio_reprint_edition      | varchar(255) | YES  |     | NULL    |       |
 | biblio_translated_title     | varchar(255) | YES  |     | NULL    |       |
 | biblio_section              | varchar(24)  | YES  |     | NULL    |       |
 | biblio_citekey              | varchar(255) | YES  |     | NULL    |       |
 | biblio_coins                | text         | YES  |     | NULL    |       |
 | biblio_doi                  | varchar(255) | YES  |     | NULL    |       |
 | biblio_issn                 | varchar(24)  | YES  |     | NULL    |       |
 | biblio_auth_address         | text         | YES  |     | NULL    |       |
 | biblio_remote_db_name       | varchar(255) | YES  |     | NULL    |       |
 | biblio_remote_db_provider   | varchar(255) | YES  |     | NULL    |       |
 | biblio_label                | varchar(255) | YES  |     | NULL    |       |
 | biblio_access_date          | varchar(255) | YES  |     | NULL    |       |
 | biblio_md5                  | varchar(32)  | YES  | MUL | NULL    |       |
 +-----------------------------+--------------+------+-----+---------+-------+
 *
 * In addition, contributors (authors/editors etc.) save in a separate table.
 */

require_once 'EntrezClient.php';

/**
 * Implementation of hook_menu().
 */
function entrez_menu() {
  $items = array();
  $items['admin/content/entrez'] = array(
    'title' => t('Entrez'),
    'description' => 'Configure default behavior of the entrez module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entrez_admin_settings'),
    'access arguments' => array('administer biblio'),
  );
  $items['admin/content/entrez/basic'] = array(
      'title' => t('Preferences'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10
  );
  $items['admin/content/entrez/pubmed_id_import'] = array(
    'title' => t('Import by Pubmed ID'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entrez_pubmed_id_import_form'),
    'access arguments' => array('create biblio'),  // not using the somewhat silly biblio_access wrapper function
    'type' => MENU_LOCAL_TASK,
    'weight' => 8,
  );
  $items['admin/content/entrez/search_import'] = array(
    'title' => t('Import by search terms'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entrez_search_import_form'),
    'access arguments' => array('administer biblio'),  // not using the somewhat silly biblio_access wrapper function
    'type' => MENU_LOCAL_TASK,
    'weight' => 8,
  );
  
  return $items;
}

function entrez_admin_settings() {
  return array();
}

/**
 * Form to import from Entrez using search terms.
 *
 * @ingroup forms
 * @see entrez_search_import_form_validate()
 * @see entrez_search_import_form_submit()
 *
 * @return
 *   An array which will be used by the form builder to build the import form.
 */
function entrez_search_import_form() {
  $esearch_help = 'http://eutils.ncbi.nlm.nih.gov/corehtml/query/static/esearch_help.html';
  $form['entrez_pubmed_search'] = array(
    '#type' => 'fieldset',
    '#title' => t('PubMed search'),
    '#description' => t('Define your PubMed search.'),
    'search_term' => array(
      '#type' => 'textarea',
      '#title' => t('Search terms'),
      '#description' => '<p>' . l('Search terms', $esearch_help . '#Searchterms') . '</p>',
      '#default_value' => variable_get('entrez_search_term', ''),
      '#required' => FALSE,
    ),
    'min_date' => array(
      '#type' => 'date_select',
      '#title' => t('Minimum date'),
      '#description' => '<p>' . l('Minimum date.', $esearch_help . '#DateRanges') . '</p>',
      '#default_value' => variable_get('entrez_min_date', ''),
      '#required' => FALSE,
    ),
    'max_date' => array(
      '#type' => 'date_select',
      '#title' => t('Maximum date'),
      '#description' => '<p>' . l('Maximum date.', $esearch_help . '#DateRanges') . '</p>',
      '#default_value' => date(DateTime::ISO8601),
      '#required' => FALSE,
    ),
    'button' => array(
      '#type' => 'submit',
      '#value' => t('Import from PubMed'),
    ),
  );
  
  return $form;
}

/**
 * Return a form used to import PubMed into biblio by PMID.
 *
 * @ingroup forms
 * @see entrez_pubmed_id_import_form_validate()
 * @see entrez_pubmed_id_import_form_submit()
 *
 * @return
 *   An array which will be used by the form builder to build the import form.
 */
function entrez_pubmed_id_import_form() {
  global $user;
  $form['entrez_pubmed_id'] = array(
    '#type' => 'textfield',
    '#title' => t('PubMed ID'),
    '#description' => t('One or more PubMed unique identifiers of articles.  If more than one, separate by spaces, commas, or semicolons.'),
    '#required' => TRUE,
  );
  // this matches the check in biblio.import.export.inc's biblio_save_node().
  if (user_access('administer nodes')) {
    module_load_include('inc', 'biblio', 'biblio.import.export');
    if (function_exists('_biblio_admin_build_user_select')) {
      // if statement redundant; no need to risk a parse error for this gravy
      // @TODO honestly an autocomplete would be a better interface
      $form['userid'] = _biblio_admin_build_user_select($user->uid);
      $form['userid']['#title'] = t('Set user credited as posting biblios:');
    } else {
      watchdog('biblioreference', 'Expected function _biblio_admin_build_user_select not available from biblio module in file biblio.import.export.inc.', WATCHDOG_ERROR);
    }
  }
  $form['import_taxonomy'] = entrez_form_taxonomy();
  $form['button'] = array(
    '#type' => 'submit',
    '#value' => t('Import from PubMed')
  );
  return $form;
}

/**
 * Provide the taxonomy portion of the pubmed import form.
 */
function entrez_form_taxonomy() {
  $form_taxonomy = array (
    '#type' => 'fieldset',
    '#tree' => TRUE, // retain array structure when processing
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Taxonomy Settings'),
    '#description' => t('If you wish, you may select terms to be assigned to imported records.  Terms or key words will apply to all entries being imported at one time.')
  );
  // Get the vocabularies attached to the biblio node type
  // $vocabularies = module_invoke('taxonomy', 'get_vocabularies', 'biblio');
  // taxonomy.module uses the below instead of above
  $c = db_query(db_rewrite_sql("SELECT v.* FROM {vocabulary} v INNER JOIN {vocabulary_node_types} n ON v.vid = n.vid WHERE n.type = '%s' ORDER BY v.weight, v.name", 'v', 'vid'), $node->type);

  while ($vocabulary = db_fetch_object($c)) {
    if ($vocabulary->tags) {
      // this is a free tagging vocabulary
      // taken directly from taxonomy.module, removing node specific parts
      if ($vocabulary->help) {
        $help = $vocabulary->help;
      }
      else {
        $help = t('A comma-separated list of terms describing this content. Example: funny, bungee jumping, "Company, Inc.".');
      }
      $form_taxonomy['tags'][$vocabulary->vid] = array('#type' => 'textfield',
        '#title' => $vocabulary->name,
        '#description' => $help,
        '#required' => $vocabulary->required,
        '#autocomplete_path' => 'taxonomy/autocomplete/'. $vocabulary->vid,
        '#weight' => $vocabulary->weight,
        '#maxlength' => 255,
      );
    }
    else {
      // not a free-tagging vocabulary.
      $vid = $vocabulary->vid;
      if (in_array($vid, variable_get('taxonomy_treecheck_vids', array()))) {
        // Large vocabularies better with taxonomy_manager_tree form element
        // @TODO remove dependency on taxonomy_treecheck, perhaps make both
        // use a common variable; alternatively make treecheck do more here
        // such as be able to provide this form?
        $form_taxonomy[$vid] = entrez_taxonomy_manager_tree($vocabulary);
      }
      else {
        $form_taxonomy[$vid] = module_invoke('taxonomy', 'form', $vocabulary->vid, array(), $vocabulary->help);
        $form_taxonomy[$vid]['#required'] = $vocabulary->required;
      }
      $form_taxonomy[$vid]['#weight'] = $vocabulary->weight;
    }
  }
  /*
   $vocab_msg = t('There are currently no vocabularies assigned to the biblio node type, please go the the !url page to change this', array ('!url' => l(t('admin/content/taxonomy'), 'admin/content/taxonomy')));
   $form_taxonomy['vocabulary_message'] = array (
   '#value' => '<p><div>' . $vocab_msg . '</div></p>'
   );
   */
}

function entrez_taxonomy_manager_tree($vocabulary) {
  $vid = $vocabulary->vid;
  $new_options = array();
  $form_taxonomy_manager_tree = array(
    '#type' => 'taxonomy_manager_tree',
	'#vid' => $vid,
	'#default_value' => is_array($old_tax['#default_value']) ? $old_tax['#default_value'] : array(),
	'#render_whole_tree' => TRUE,
    '#pager' => FALSE,
    '#parent' => 0,
    '#add_term_info' => FALSE,
    '#expand_all' => 0,
    '#tree_is_required' => $old_tax['#required'],
    '#required' => FALSE,
    '#multiple' => $supress_multi?FALSE:(isset($old_tax['#multiple']) ? $old_tax['#multiple'] : FALSE),
    '#title' => $old_tax['#title'],
    '#field_name' => $vid,
    '#columns' => 0,
    '#description' => $old_tax['#description'],
  );
}

/**
 * Implementation of validation for entrez_pubmed_import_form.
 */
function entrez_search_import_form_validate($form, &$form_state) {
  $search_term = $form_state['values']['search_term'];
  $min_date = $form_state['values']['min_date'];
  $max_date = $form_state['values']['max_date'];
  
  if (empty($search_term)) {
    form_set_error('entrez_pubmed_search',
      t('Please enter at least one Search term.'));
  }
  elseif ($min_date >= $max_date) {
    form_set_error('entrez_pubmed_search',
      t('Minimum date must be earlier than Maximum date.'));
  }
  else {
    variable_set('entrez_search_term', $search_term);
    variable_set('entrez_min_date', $max_date);
  }
}

function entrez_pubmed_id_import_form_validate($form, &$form_state) {
  $pmids = entrez_au_rationalize_separators($form_state['values']['entrez_pubmed_id']);
  if (empty($pmids)) {
    form_set_error('entrez_pubmed_id', t('Please enter at least one PubMed ID.'));
  }
  else {
    $errors = array();
    for ($i = 0; $i < count($pmids); $i++) {
      if (!ctype_digit($pmids[$i]) || $pmids[$i] <= 0) {
        // "@" sends the input through check_plain to prevent security breaches
        $errors[] = t('A value entered, %pmid, is not a positive integer.', array('%pmid' => $pmids[$i]));
      }
    }
    if ($errors) {
      // Report how many and which entered pubmed IDs were rejected
      form_set_error('entrez_pubmed_id', implode(' ', $errors) . ' ' . t('Please ensure you input valid PubMed IDs.'));
    }
    else {
      // add the cleaned-up pubmed IDs to the form values
      // these are passed to submit by reference
      $form_state['values']['pmids'] = $pmids;
    }
  }
}

/**
 * Implementation of submit for the entrez_pubmed_import_form.
 *
 * @param $form
 * @param $form_state
 */
function entrez_search_import_form_submit($form, &$form_state) {
  if (isset($form_state['values']['userid'])) {
    $uid = $form_state['values']['userid'];
  }
  else {
    global $user;
    $uid = $user->uid;
  }
  // if we allow creation of free tagging terms, this will become complicated.
  // we will have to know the vocabulary and create the terms first
  $term_ids = array();
  $taxonomy = $form_state['values']['taxonomy']; // works because form tree true
  if (isset($taxonomy) && is_array($taxonomy)) {
    foreach ($taxonomy as $vid => $vocabulary) {
      $vocab_term_ids = array_keys($vocabulary);  // this changes for free tags
      $term_ids = array_merge($term_ids, $vocab_term_ids);
    }
  }
  $node_info = array(
    'uid' => $uid,
    'taxonomy' => $term_ids,
    'status' => 0, // set bulk imported to unpublished by default
  );

  $entrez = entrez_create_client();
  $entrez->setReturnMax(25);
  $entrez->setTerm($form_state['values']['search_term']);
  
  if (isset($form_state['values']['min_date']) &&
      isset($form_state['values']['max_date'])) {
    $entrez->setDateRange(
      $form_state['values']['min_date'],
      $form_state['values']['max_date']
    );
  }
  
  try {
    $entrez->search();
    // Disable indexing during mass import. Run afterwards.
    variable_set('biblio_index', 0);
  
    if ($entrez->count() > $entrez->getReturnMax()) { // go to batch mode
      $destination = $_GET['q'];
      $batch_op = array(
        'title' => t('Importing @count Pubmed articles', array('@count' => $entrez->count())),
        'operations' => array(
          array(
            'entrez_import_batch',
            array($entrez, $node_info, $entrez->getReturnMax()),
          ),
        ),
        'progressive' => TRUE,
        'finished' => 'entrez_import_batch_finished',
        'init_message' => t('Processing bibliography imports from PubMed.'),
        'progress_message' => t('Importing from PubMed and saving bibliographies.'),
        'file' => './'. drupal_get_path('module', 'biblioreference') .'/pubmed_import.inc'
      );
      batch_set($batch_op);
      batch_process($destination);
    }
    elseif ($entrez->count() > 0) {
      foreach ($entrez->fetchResults()->PubmedArticle as $pm) {
        $nid = entrez_import_pubmed($pm, $node_info);
      }

      $message = format_plural(
        $entrez->count(),
        'One bibliography saved.',
        '@count bibliographies saved.'
      );
      
      drupal_set_message($message);
      biblioreference_update_index();
    }
    else {
      drupal_set_message(t('Sorry, your search returned no results.'));
    }
    
    variable_set('biblio_index', 1);
    variable_set('entrez_min_date', $form_state['values']['max_date']);
  }
  catch (Exception $exception) {
    drupal_set_message(t('An error occurred when requesting data from ' .
      'PubMed. Try again later.'));
  }
}

function entrez_cron() {
/* cron is not ready.  Batch API handles use case for now 
  $entrez = entrez_create_client();
  $entrez->setDateRange(date('Y/m/d'), strtotime('-1 day'));
  $entrez->setTerm(variable_get('entrez_search_term'), '');
  
  try {
    $entrez->search();
    
    if ($entrez->count() > $entrez->getReturnMax()) {
      //jobqueue
    }
    elseif ($entrez->count() > 0) {
      foreach ($entrez->fetchResults()->PubmedArticle as $pm) {
        $nid = entrez_import_pubmed($pm, $node_info);
      }

      $message = format_plural(
        $entrez->count(),
        'One bibliography saved.',
        '@count bibliographies saved.'
      );
      
      drupal_set_message($message);
      biblioreference_update_index();
    }
    else {
      watchdog('entrez', 'Your search returned no results.', array(),
        WATCHDOG_INFO);
    }
  }
  catch (Exception $exception) {
    watchdog('entrez', 'An error occurred when requesting data from PubMed.',
      array(), WATCHDOG_ERROR);
  }
end temporary removal of cron  */  
}

/**
 * Imports Pubmed documents matching the IDs entered by the user.
 *
 * @param $form
 * @param $form_state
 */
function entrez_pubmed_id_import_form_submit($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $entrez = entrez_create_client();
  // @TODO if people try updating lots of pmids, send it to search function
  // where batch mode will be used and also avoid dozens of queries for titles.
  foreach ($form_state['values']['pmids'] as $pmid) {
    try {
      $biblio = entrez_import_pubmed($entrez->fetch($pmid)->PubmedArticle);
      drupal_set_message(t('Successfully imported bibliographic citation !link', array('!link' => l($biblio->title, 'node/' . $biblio->nid))));
    }
    catch (Exception $exception) {
      watchdog('entrez', $exception->getMessage(), array(), WATCHDOG_ERROR);
      drupal_set_message(t('An error occurred when requesting data from ' .
        'PubMed. Try again later.'));
    }
  }
}

/**
 * Batch callback operation: Import PubMed articles into Biblio.
 *
 * @param $entrez
 *   A configured entrez client object
 * @param $node_info
 *   Array of node information to act as default for imported bibliographies.
 * @param $size
 *   Number of articles to import in each operation.
 * @param $context
 *   Batch context containing state information.
 */
function entrez_import_batch($entrez, $node_info, $size, &$context) {
  // Initialize sandbox the first time through
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $entrez->count();
    $context['results']['nids'] = array();
  }
  $max = min(
    $context['sandbox']['max'],
    $context['sandbox']['progress'] + $size
  );

  $i = $context['sandbox']['progress'];

  // Sometimes the NCBI server responds with errors. Retry in the next batch.
  try {
    foreach ($entrez->fetchResults($i)->PubmedArticle as $pm) {
      $nid = entrez_import_pubmed($pm, $node_info);
      if ($nid) {
        $context['results']['nids'][] = $nid;
        $i++;
      }
    }
  }
  catch (Exception $exception) {
    watchdog('biblioreference', $exception->getMessage(), array(),
      WATCHDOG_ERROR);
  }

  $context['sandbox']['progress'] = $i;
  // Multistep processing : report progress.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 *
 * @param $success
 * @param $results
 * @param $operations
 */
function entrez_import_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = format_plural(count($results['nids']), 'One bibliography saved.', '@count bibliographies saved.');
  }
  else {
    $message = t('Import finished with an error.');
  }
  
  variable_set('biblio_index', 1);
  drupal_set_message($message);
  /*
   foreach ($results['nids'] as $node_id) {
   if (count($results['terms'])) module_invoke('taxonomy', 'node_save', $node_id, $results['terms']);
   db_query('UPDATE {node} SET uid = %d WHERE nid = %d', $results['userid'], $node_id);
   db_query('UPDATE {node_revisions} SET uid = %d WHERE nid = %d', $results['userid'], $node_id);
   }
   */
}

/**
 * Imports and the given Pubmed document to the biblio database.
 *
 * Optionally takes an array of Drupal taxonomy term IDs to attach to the
 * biblio node when saving.
 *
 * @param $pmxml
 * @param $node_info
 * @return int
 *   the node id of the imported biblio item
 */
function entrez_import_pubmed(SimpleXMLElement $pmxml, $node_info = array()) {
  if (!isset($pmxml->MedlineCitation)) {
    watchdog('entrez', 'The retrieved data is invalid: !data',
      array('!data' => $pmxml->asXML()), WATCHDOG_ERROR);
    return FALSE;
  }
  
  $biblio = entrez_parse_medline_citation($pmxml->MedlineCitation);
  $nodelet = db_fetch_array(
    db_query(
      "SELECT nid, vid from {biblio} WHERE `biblio_citekey` = %d LIMIT 1",
      $pmxml->MedlineCitation->PMID
    )
  );

  if (!$nodelet) {
    $nodelet = array();
  }
  else {
    $nodelet['taxonomy'] = taxonomy_node_get_terms((object)$nodelet);
  }
    
  $biblio = array_merge(
    entrez_biblio_node_defaults(),
    $node_info,
    $nodelet,
    $biblio
  );
  $biblio = (object)$biblio;

  module_load_include('inc', 'biblio', 'biblio.keywords');
  module_load_include('inc', 'biblio', 'biblio.import.export');
  node_save($biblio);
  watchdog('biblioreference', 'Imported bibliographic citation !title',
    array('!title' => $biblio->title), WATCHDOG_INFO);
  
  // biblio_save_node calls node_save which triggers biblio_insert or _update
  // no need to call biblio_save_node, we are handling defaults and our batches
  /* this is being done?  It should be!  or in a wrapper save_node function if we must
  foreach ($nids as $node_id) {
  if (count($tid)) {
  module_invoke('taxonomy', 'node_save', $node_id, $term_ids);
  }
  db_query('UPDATE {node} SET uid = %d WHERE nid = %d', $uid, $node_id);
  db_query('UPDATE {node_revisions} SET uid = %d WHERE nid = %d', $uid, $node_id);
  */
  return $biblio;
}

// old style.  @TODO kill Stefan for subsuming under the entrez search system.  and rationalize together.  or maybe entrez search would just get by pmid
// quick and dirty for now
/**
 * Import and save a Pubmed document to Biblio by Pubmed ID.
 *
 * Optionally take an array of Drupal taxonomy term IDs to attach to the biblio
 * node when saving.
 */
function biblioreference_import_pubmed_by_pmid($pmid, $uid = 1, $term_ids = array()) {
  $biblio = biblioreference_parse_pubmed_for_biblio($pmid);
  if (!$biblio)  return;  // error message should already be triggered
  // need to pass in an object with a version id to get terms, so make nodelet
  $nodelet = db_fetch_object(db_query("SELECT nid, vid from {biblio} WHERE `biblio_citekey` = %d LIMIT 1", $pmid));
  if (!$nodelet) {
    drupal_set_message(t("This is new primary ID: @pmid", array('@pmid' => $pmid)));
  }
  else {
    drupal_set_message(t("A bibliographic entry exists for @pmid; it will be updated with this import.", array('@pmid' => $pmid)));
    $biblio['nid'] = $nodelet->nid;
    // vid is important for drupal_write_record to work right in node_save
    $biblio['vid'] = $nodelet->vid;
    //@TODO - do a full node_load here to retain all non-biblio info?  such as?
    $terms = taxonomy_node_get_terms($nodelet);
    //@DEBUG
    //drupal_set_message('terms:<pre>'.var_export($terms,TRUE).'</pre>');
    if (!empty($terms)) {
      if (!isset($biblio['taxonomy'])) $biblio['taxonomy'] = array();
      $biblio['taxonomy'] = array_merge($terms, $biblio['taxonomy']);
    }
  }
  $biblio['uid'] = $uid;
//@DEBUG
//drupal_set_message('taxonomy:<pre>'.var_export($biblio['taxonomy'],TRUE).'</pre>');
  if (!isset($biblio['taxonomy']))  $biblio['taxonomy'] = array();
    //@DEBUG
    //drupal_set_message('term_ids:<pre>'.var_export($term_ids,TRUE).'</pre>');
  $biblio['taxonomy'] = array_merge($term_ids, $biblio['taxonomy']);
//@DEBUG
//drupal_set_message('node_array:<pre>'.var_export($biblio,TRUE).'</pre>');

  // needs to be included
  module_load_include('inc', 'biblio', 'biblio.keywords');
  module_load_include('inc', 'biblio', 'biblio.import.export');
  // biblio_save_node calls node_save which triggers biblio_insert or _update
  $nid = biblio_save_node($biblio); // , $batch, $session_id);
/* this is being done by biblio?
  foreach ($nids as $node_id) {
    if (count($tid)) {
      module_invoke('taxonomy', 'node_save', $node_id, $term_ids);
    }
    db_query('UPDATE {node} SET uid = %d WHERE nid = %d', $uid, $node_id);
    db_query('UPDATE {node_revisions} SET uid = %d WHERE nid = %d', $uid, $node_id);
*/
    // Not worth the db query to get the title, but we have it already still.
  drupal_set_message(t('Imported bibliographic citation') . ' ' . l($biblio['title'], 'node/' . $nid));
}

/**
 * Load a single pubmed article XML by pubmed ID.
 *
 * Heavily modified from gopubmed.module (our upgraded to D6 version), function
 * gopubmed_load_bibtext_by_pmid($primaryId, $db = 'pubmed').
 *
 * Ideally the fetching the xml would be a different step from parsing it, but
 * the simplexml_load_file function does it all with a .
 * or best get changes incorporated into gopubmed and keep dependency.
 *
 * @return array an array of values suitable for import into a biblio node
 */
function biblioreference_parse_pubmed_for_biblio($pmid) {
  $b = array();

  // ESummary Retrieves document summaries from a list of primary IDs
  // which we got from the ESearch
  // $esummary_url = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=$db&id=$pmid&retmode=xml";
  // $esummary_load = simplexml_load_file($esummary_url);
  $pmurl = 'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?'
         . "db=pubmed&id={$pmid}&retmode=xml";
  $pmxml = simplexml_load_file($pmurl);
  if (!is_object($pmxml)) {  // make sure the connection worked
    drupal_set_message(t("Failed to fetch document summary object from %url.",
      array('%url' => $pmurl)), 'error');
    return;
  }
  $pm = $pmxml->PubmedArticle->MedlineCitation;
  return biblioreference_parse_medline_citation($pm);
}

/**
 * Biblio node defaults for use as the base of merging in other values.
 *
 * In general use user-configurable settings afforded by biblio module.
 *
 * @return array
 */
function entrez_biblio_node_defaults() {
  $options = variable_get('node_options_biblio', array('status'));
  $node_defaults = array(
    'type' => 'biblio',
    'uid' => 1,
    'status' => in_array('status', $options),
    'promote' => in_array('promote', $options),
    'moderate' => in_array('moderate', $options), // note: not used in Drupal core
    'sticky' => in_array('sticky', $options),
    'format' => 0,
    'comment' => variable_get('comment_biblio', 0),
    'taxonomy' => array(),
    'biblio_type' => 129, // miscellaneous
  );
  return $node_defaults;
}

/**
 * Parses a single PubMed MedlineCitation XML element to an associative array
 * suitable for import into a biblio node.
 *
 * Heavily modified from gopubmed.module (our upgraded to D6 version), function
 * gopubmed_load_bibtext_by_pmid($primaryId, $db = 'pubmed').
 *
 * @param $pm object
 * @return array
 *   an array of values suitable for import into a biblio node
 */
function entrez_parse_medline_citation(SimpleXMLElement $pm) {
  $pmid = (int)$pm->PMID;

  $b['title'] = (string)$pm->Article->ArticleTitle;
  $b['biblio_citekey'] = $pmid;
  $b['biblio_contributors'] = entrez_pubmed_contributors($pm);
  // MedlineCitations are always articles from journals or books
  $b['biblio_type'] = 102;
  $b['biblio_date'] = entrez_pubmed_pubdate($pm);
  $b['biblio_year'] = substr($b['biblio_date'], 0, 4);
  $b['biblio_secondary_title'] = (string)$pm->Article->Journal->Title;
  $b['biblio_alternate_title'] = (string)$pm->Article->Journal->ISOAbbreviation;
  $b['biblio_volume'] = (string)$pm->Article->Journal->JournalIssue->Volume;
  $b['biblio_issue'] = (string)$pm->Article->Journal->JournalIssue->Issue;
  $b['biblio_issn'] = (string)$pm->Article->Journal->Issn;
  $b['biblio_pages'] = (string)$pm->Article->Pagination->MedlinePgn;
  // not used?    $b['language = {' . $language . '},'. "\n";
  $b['biblio_abst_e'] = (string)$pm->Article->Abstract->AbstractText;
  $b['biblio_url'] = entrez_pubmed_article_link($pmid);
  $b['biblio_custom1'] = "http://www.ncbi.nlm.nih.gov/pubmed/$pmid?dopt=Abstract";
  //  $b['biblio_custom7'] = $pmurl;  // would have to be reconstructed or passed in
  $doi = $pm->xpath('//ELocationID[@EIdType="doi"]/text()');
  if (!empty($doi)) {
    $b['biblio_doi'] = $doi[0];
  }

  return $b;
}

/**
 * Returns the list of contributors for import obtained from the given
 * MedlineCitation element.
 *
 * @param object $pm
 * @return array
 */
function entrez_pubmed_contributors(SimpleXMLElement $pm) {
  if (!isset($pm->Article->AuthorList->Author)) {
    watchdog(
      'biblioreference',
      "No authors listed for article with PubMed ID !pmid.",
      array('!pmid' => $pm->PMID)
    );
    return array();
  }
  foreach ($pm->Article->AuthorList->Author as $author) {
    if (isset($author->CollectiveName)) {
      $category = 5; // corporate author
      $name = (string)$author->CollectiveName;
    } else {
      $category = 1; //primary (human) author
      $lastname = (string)$author->LastName;
      if (isset($author->ForeName)) {
        $name = $lastname . ', ' . (string)$author->ForeName;
      } elseif (isset($author->FirstName)) {
        $name = $lastname . ', ' . (string)$author->FirstName;
      } elseif (isset($author->Initials)) {
        $name = $lastname . ', ' . (string)$author->Initials;
      }
    }
    $contributors[$category][] = array('name' => $name);
  }
  return $contributors;
}

/**
 * Returns the publication date obtained from the given MedlineCitation's
 * PubDate element. See the reference documentation for possible values:
 * http://www.nlm.nih.gov/bsd/licensee/elements_descriptions.html#pubdate
 * According to the above source it always begins with a four digit year.
 *
 * @param $pm
 * @return string
 */
function entrez_pubmed_pubdate(SimpleXMLElement $pm) {
  $pub_date = $pm->Article->Journal->JournalIssue->PubDate;
  if (isset($pub_date->MedlineDate)) {
    $date = $pub_date->MedlineDate;
  } else {
    $date = implode(' ', (array)$pub_date);
  }
  return (string)$date;
}

/**
 * Get the full article link through ELink.
 *
 * ELink Checks for the existence of an external or Related Articles link from
 * a list of one or more primary IDs.  Retrieves primary IDs and relevancy
 * scores for links to Entrez databases or Related Articles;  creates
 * a hyperlink to the primary LinkOut provider for a specific ID and database,
 * or lists LinkOut URLs and Attributes for multiple IDs
 */
function entrez_pubmed_article_link($pmid, $db = 'pubmed') {
  //@TODO - this has been hanging and delaying testing.  check what's what.
  return '';
  $llink_url = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/elink.fcgi?dbfrom=$db&id=$pmid&cmd=prlinks";
  $llink_load = simplexml_load_file($llink_url);
  if (!is_object($llink_load)) {
    drupal_set_message(t("Failed to fetch object from %url.", array('%url' => $llink_url)), 'error');
    return;
  } // we have an object, continue on
  $llink_array = $llink_load->ObjUrl->xpath("//Url");
  $article_link = $llink_array[0];
  return $article_link;
}

/**
 * Replace all other separators in a string with spaces and split into arary.
 *
 * Agaric Utility function most practical for numeric IDs, rather than text.
 *
 * @param $string
 *  String value containing one or more simple values, separated by anything.
 * @return
 *  Array of values from the split string.
 */
function entrez_au_rationalize_separators($string) {
  // transform all separators into spaces
  $seps = array(',', ';', ':', '|', '.');
  $string = str_replace($seps, ' ', $string);
  $string = trim(ereg_replace(' +', ' ', $string));
  return explode(' ', $string);
}

/**
 * Returns a new EntrezClient instance.
 *
 * @return EntrezClient
 */
function entrez_create_client() {
  $client = new EntrezClient();
  $client->setEmail(variable_get('site_mail', null));
  $client->setTool(variable_get('site_name', 'Drupal'));

  return $client;
}
