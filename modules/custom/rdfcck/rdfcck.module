<?php
// $Id: rdfcck.module,v 1.1.2.8 2008/11/07 20:03:31 scor Exp $

/**
 * @file
 * Defines mappings between CCK fields and RDF, and exports nodes as RDF.
 */

/**
 * Implementation of hook_perm().
 */
function rdfcck_perm() {
  return array('administer RDF CCK mappings');
}

/**
 * Implementation of hook_menu().
 */
function rdfcck_menu() {
  $items = array();

  // Make sure this doesn't fire until content_types is working,
  // needed to avoid errors on initial installation.
  if (!defined('MAINTENANCE_MODE')) {
    foreach (node_get_types() as $type) {
      $type_name = $type->type;
      $content_type = content_types($type_name);
      $type_url_str = $content_type['url_str'];
      $items['admin/content/node-type/'. $type_url_str .'/rdf'] = array(
        'title' => 'Manage RDF mappings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('rdfcck_admin_rdf_overview_form', $type_name),
        'access arguments' => array('administer RDF CCK mappings'),
        //'file' => 'includes/content.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 1,
      );
    }
  }
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function rdfcck_theme() {
  return array(
    'rdfcck_admin_rdf_overview_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Menu callback; listing of field RDF mappings for a content type.
 *
 * Allows the content type to be mapped to a RDF class and
 * fields to be mapped to RDF properties.
 */
function rdfcck_admin_rdf_overview_form(&$form_state, $type_name) {
  // When displaying the form, make sure the list of 'extra' fields
  // is up-to-date.
  if (empty($form_state['post'])) {
    content_clear_type_cache();
  }

  // Gather type information.
  $type = content_types($type_name);
  $fields = $type['fields'];
  $field_types = _content_field_types();

  if (empty($fields) && empty($form_state['post'])) {
    drupal_set_message(t('There are no fields configured for this content type. You can !link.', array(
      '!link' => l(t('Add a new field'), str_replace('/fields', '/add_field', $_GET['q'])))), 'warning');
  }

  $extra = $type['extra'];
  $groups = $group_options = array();
  if (module_exists('fieldgroup')) {
    $groups = fieldgroup_groups($type['type']);
    $group_options = _fieldgroup_groups_label($type['type']);
  }

  // Rows in this table are essentially nested, but for the simplicity of
  // theme and submit functions, we keep them in a flat array, and use a
  // $dummy render structure to figure the right display order.
  $dummy = array();

  // Define which fields will be mappable to RDF properties.
  // The title, body and all CCK fields can be mapped to RDF.
  $rdf_fields = array_keys($fields);
  $rdf_fields[] = 'title';
  $rdf_fields[] = 'body_field';

  $form = array(
    '#tree' => TRUE,
    '#type_name' => $type['type'],
    '#fields' => array_keys($fields),
    '#rdf_fields' => $rdf_fields,
    '#groups' => array_keys($groups),
    '#extra' => array_keys($extra),
    '#order' => array(),
    '#prefix' => '<p>'. t('Specify the RDF class of this content type. You can also map the CCK fields to existing RDF properties.') .'</p>',
  );

  $form['rdf_class'] = array(
    '#type' => 'select',
    '#title' => t('RDF class'),
    '#description' => t('Choose the RDF class this content type will be mapped to.'),
    '#default_value' => _rdfcck_get_default_class($type_name),
    '#options' => _rdfcck_get_classes(),
  );

  // Fields.
  foreach ($fields as $name => $field) {
    $weight = $field['widget']['weight'];
    $form[$name] = array(
      'human_name' => array('#value' => check_plain($field['widget']['label'])),
      'name' => array('#value' => $field['field_name']),
      'type' => array('#value' => t($field_types[$field['type']]['label'])),
      'rdf_property' => array('#type' => 'select', '#options' => _rdfcck_get_properties(), '#default_value' => _rdfcck_get_default_property($type_name, $name)),
      'hidden_name' => array('#type' => 'hidden', '#default_value' => $field['field_name']),
      '#leaf' => TRUE,
    );
    $dummy[$name] = array('#weight' => $weight, '#value' => $name .' ');
  }

  // Groups.
  foreach ($groups as $name => $group) {
    $weight = $group['weight'];
    $form[$name] = array(
      'human_name' => array('#value' => check_plain($group['label'])),
      'name' => array('#value' => $group['group_name']),
      'type' => array(),
      'rdf_property' => array(),
      'hidden_name' => array('#type' => 'hidden', '#default_value' => $group['group_name']),
      '#root' => TRUE,
    );
    $dummy[$name] = array('#weight' => $weight, '#value' => $name .' ');
    // Adjust child fields rows.
    foreach ($group['fields'] as $field_name => $field) {
      $form[$field_name]['#depth'] = 1;
      $form[$field_name]['parent']['#default_value'] = $name;
      $dummy[$name][$field_name] = $dummy[$field_name];
      unset($dummy[$field_name]);
    }
  }

  // Non-CCK 'fields'.
  foreach ($extra as $name => $label) {
    if (in_array($name, $form['#rdf_fields'])) {
      $weight = $extra[$name]['weight'];
      $form[$name] = array(
        'human_name' => array('#value' => t($extra[$name]['label'])),
        'name' => array('#value' => isset($extra[$name]['description']) ? $extra[$name]['description'] : ''),
        'type' => array(),
        'rdf_property' => array('#type' => 'select', '#options' => _rdfcck_get_properties(), '#default_value' => _rdfcck_get_default_property($type_name, $name)),
        'hidden_name' => array('#type' => 'hidden', '#default_value' => $name),
        '#leaf' => TRUE,
        '#root' => TRUE,
        '#extra_field' => TRUE,
      );
      $dummy[$name] = array('#weight' => $weight, '#value' => $name .' ');
    }
  }

  // Let drupal_render figure out the right order for the rows.
  $form['#order'] = explode(' ', trim(drupal_render($dummy)));

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
}

/**
 *  Theme the field overview table.
 */
function theme_rdfcck_admin_rdf_overview_form($form) {
  if (empty($form['#order'])) {
    return;
  }
  $output = drupal_render($form['rdf_class']);

  $header = array(t('Label'), t('Name'), t('Type'), t('RDF property'));
  $rows = array();

  foreach ($form['#order'] as $key) {
    $row = array();
    $element = &$form[$key];
    $element['weight']['#attributes']['class'] = 'field-weight';
    $element['parent']['#attributes']['class'] = 'group-parent';
    $element['hidden_name']['#attributes']['class'] = 'field-name';
    if (in_array($key, $form['#groups'])) {
      $element['human_name']['#prefix'] = '<strong>';
      $element['human_name']['#suffix'] = '</strong>';
    }
    $row[] = theme('indentation', isset($element['#depth']) ? $element['#depth'] : 0) . drupal_render($element['human_name']);
    $row[] = drupal_render($element['name']);
    $row[] = drupal_render($element['type']);
    $row[] = drupal_render($element['rdf_property']);

    $class = '';
    $rows[] = array('data' => $row, 'class' => $class);
  }

  $output .= theme('table', $header, $rows, array('id' => 'content-field-overview'));
  $output .= drupal_render($form);

  return $output;
}

function rdfcck_admin_rdf_overview_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  $msg = FALSE;
  $extra = array();

  foreach ($form_values as $key => $values) {
    if ($key == 'rdf_class') {
      // Delete the class mapping.
      db_query("DELETE FROM {node_type_rdf} WHERE type = '%s'", $form['#type_name']);
      // Update the RDF class mapping if a class id is provided.
      if ($class_nid = $values) {
        db_query("INSERT INTO {node_type_rdf} (type, class_nid) VALUES ('%s', %d)", $form['#type_name'], $class_nid);
      }
      drupal_set_message(t('Updated RDF class mapping.'));
    }
    elseif (in_array($key, $form['#rdf_fields'])) {
      // Delete the property mapping.
      db_query("DELETE FROM {node_field_rdf} WHERE field_name = '%s'", $key);
      // Update the mapping if specified.
      if ($value = $values['rdf_property']) {
        db_query("INSERT INTO {node_field_rdf} (field_name, node_type, property_nid) VALUES ('%s', '%s', %d)", $key, $form['#type_name'], $value);
      }
      $msg = TRUE;
    }
  }
  if ($msg) {
    drupal_set_message(t('Updated RDF property mappings.'));
  }

  content_clear_type_cache();
}

function _rdfcck_get_default_property($type_name, $field_name) {
  $property = db_query(db_rewrite_sql("SELECT property_nid FROM {node_field_rdf} WHERE field_name = '%s' AND node_type = '%s'"), $field_name, $type_name);

  while ($item = db_fetch_object($property)) {
    $property_nid = $item->property_nid;
  }

  return $property_nid;
}

function _rdfcck_get_default_class($field_name) {
  $class = db_query(db_rewrite_sql('SELECT class_nid FROM {node_type_rdf} WHERE type="%s" '), $field_name);

  while ($item = db_fetch_object($class)) {
    $class_nid = $item->class_nid;
  }

  return $class_nid;
}

function _rdfcck_get_properties() {
  $properties_options = array();
  $properties_options[0] = '<none>';
  $properties = db_query(db_rewrite_sql('SELECT n.nid, n.title FROM {content_field_vocabulary} c INNER JOIN {node} n ON c.nid = n.nid
    WHERE n.type = "neo_property" AND n.status = 1'));

  while ($item = db_fetch_object($properties)) {
    $properties_options[$item->nid] = $item->title;
  }

  return $properties_options;
}

function _rdfcck_get_classes() {
  $classes_options = array();
  $classes_options[0] = '<none>';
  $classes = db_query(db_rewrite_sql('SELECT n.nid, n.title FROM {content_field_vocabulary} c INNER JOIN {node} n ON c.nid = n.nid
    WHERE n.type = "neo_class" AND n.status = 1'));

  while ($item = db_fetch_object($classes)) {
    $classes_options[$item->nid] = $item->title;
  }
  return $classes_options;
}
