<?php


/**
 * Implementation of hook_menu().
 */
function user_import_extra_menu() {
  $items['admin/user/user_import/extra'] = array(
    'title' => 'Manage Temporary Blocked Users',
    'description' => t(''),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_import_extra_mailblocked'),
    'access arguments' => array('import users'),
    'file' => 'user_import_extra.admin.inc',
    'type' => MENU_LOCAL_TASK
  );
  $items['user_import_extra/sendmail'] = array(
    'title' => 'Send mail',
    'description' => t(''),
    'page callback' => 'user_import_sendmail',
    'access arguments' => array('import users'),
    'file' => 'user_import_extra.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}
/*
 * Implementation of user_import_extra_menu().
 * Alters the reset URL so it first redirects to our function, which will deblock the account if it needs to be. 
*/
function user_import_extra_menu_alter(&$items) {
  $items['user/reset/%/%/%']['page arguments'] = array('user_import_extra_user_pass_reset', 2, 3, 4);
}

function user_import_extra_user_pass_reset(&$form_state, $uid, $timestamp, $hashed_pass, $action = NULL)  {
	if (user_import_extra_check_uids($uid, false)) {
		$account = user_load($uid);
		user_import_extra_unblock($account);
	}
	return user_pass_reset($form_state, $uid, $timestamp, $hashed_pass, $action);
}

/*
	Implementation of hook_cron
*/
function user_import_extra_cron() {
	$uids = variable_get('user_import_extra_save_uids', array());
	if (count($uids)) {
		$uids = user_import_extra_get_process_uids($uids);
		user_import_extra_process($uids);
	}
}

/*
	returns a portion of array that will be processes this round, or everything if cron is not being used. 
*/
function user_import_extra_get_process_uids($uids,$cron=true) {
	$import_max = variable_get('user_import_max', 250);
	if ($cron) {
		$uids_process =  array_slice($uids, 0, $import_max);
		$uids_save = user_import_extra_check_uids(array_slice($uids,$import_max));
		if ($uids_save) {
			variable_set('user_import_extra_save_uids', $uids_save);
		}
		return $uids_process;
	}
	else {
		return $uids;
	}	
}

/*
	Mails a single account, removes the uid from our table.  
	MOST include module_load_include('inc','user_import','supported/user_import'); before calling 
*/
function user_import_extra_mail_single($uid) {
	$account = user_load($uid);
	$password = user_password();
	if ($account->uid) {
		$account = user_save($account,array('pass' => $password));
		// function checks empty, defaults most of these fields but doesn't use $var='' so nulls to prevent php warnings
		_user_import_send_email($account,$password,null,null,null,null,null,null);
		user_import_extra_set_mailed($account->uid);
	}	
}
/*
	takes UIDS and sends mail, invoked by form in user_import_extra.admin.inc and by cron.
*/
function user_import_extra_process($uids) {
	module_load_include('inc','user_import','supported/user_import');
	// verify that uids are still valid
	$uids = user_import_extra_check_uids($uids);
	
	if (is_array($uids) && count($uids)) {
		foreach ($uids as $uid) {
			user_import_extra_mail_single($uid);
		}
	}	
}
/*
	Implementation of user_import_after_save
*/
function user_import_extra_user_import_after_save($settings, $account, $password, $fields) {
	// can't add it into presave due to another pre_save returning status
	// so set status here
	if ($settings['block_users']) {
		user_import_extra_toggle_mail();
		$account = user_save($account,array('status' => 0));
		user_import_extra_set_uids($account->uid);
		user_import_extra_toggle_mail(false);
	}
  return;
}
/*
	Implementation of user_import_form_fieldset
	adds in a new field
*/
function user_import_extra_user_import_form_fieldset($import, $collapsed) {
	$form['optional']['block_users'] = array(
  		'#type' => 'checkbox',
  		'#title' => t('Temporarily Block Users'),
  		'#description' => t('Set users to blocked but unblock them on first sign in.'),
	);
	return $form;
}
/*
	Implementation of hook_user
*/
function user_import_extra_user($op, &$edit, &$account, $category = NULL) {
	switch($op) {
		case 'delete':
			user_import_extra_remove_uids($account->uid);
			break;
		case 'view':
			if (user_access('import users') && user_import_extra_check_uids($account->uid)) {
				$account->content['send_mail']['#value']  = '<div class="user-import-extra-link">'.l('Send user login email','user_import_extra/sendmail/'.$account->uid).'<div>';
			}
			break;	
	}
}

/*
	Implementation of hook_form_alter
	adds a login validation 
*/
function user_import_extra_form_alter(&$form, $form_state, $form_id) {
	if ($form['#id'] == 'user-login-form' || $form_id == 'user_login') {
		array_unshift($form['#validate'],'user_import_extra_login_validate');
	}
}
function user_import_extra_unblock($account) {
 	if ($account->uid) {
  		user_import_extra_toggle_mail();
  		$account = user_save($account,array('status' => 1));
  		user_import_extra_toggle_mail(false);
  		user_import_extra_remove_uids($account->uid);
  	}
}
/*
	Custom user login validation 
	Unblocks the user on login 
*/
function user_import_extra_login_validate($form, &$form_state) {
  global $user;
  if (user_import_extra_check_usernames($form_state['values']['name'], false)) {
 	 // make sure the passwords match 
 	$account = user_load(array('name' => $form_state['values']['name'], 'pass' => trim($form_state['values']['pass'])));
  	user_import_extra_unblock($account);
  }
}
/*
	toggle user email notification
*/
function user_import_extra_toggle_mail($off = true) {
	static $old_notify ;
	$statuses = array('status_activated','status_blocked','status_activated');
	if (!isset($old_notify)) {
		$old_notify = array();
		foreach ($statuses as $status) {
			$default_notify = ($status != 'status_deleted' && $status != 'status_blocked');
			$old_notify[$status] =variable_get('user_mail_'.$status.'_notify', $default_notify);
		}
	}
	if ($off) {
		foreach ($statuses as $status) {
			variable_set('user_mail_'.$status.'_notify', 0);
		}
	} else {
		foreach ($statuses as $status) {
			variable_set('user_mail_'.$status.'_notify', $old_notify[$status]);
		}
	}
	
}





/*DB functions for interacting with user_import_extra table*/
function user_import_extra_set_uids($uids) {
	if(is_numeric($uids)) {
		db_query('INSERT into {user_import_extra} (uid) VALUES (' . db_placeholders($uids) . ')', array($uids));
	}
	elseif(is_array($uids) && count($uids) > 0 ) { 
		$placeholder = db_type_placeholder('int');
   		$placeholders=implode('),(', array_fill(0, count($arguments), $placeholder));
		db_query('INSERT into {user_import_extra} (uid) VALUES (' . $placeholders .')', $uids);
	}
}

function user_import_extra_set_mailed($uids) {
	if (is_array($uids)) $result = db_query('UPDATE {user_import_extra} SET mail = 1 WHERE uid IN ('.db_placeholders($uids).') '. $add,$uids);
	elseif(is_numeric($uids)) $result = db_query('UPDATE {user_import_extra} SET mail = 1 WHERE uid = '.db_placeholders($uids) .  $add,array($uids));
}

function user_import_extra_get_all_uids($not_mailed = true) {
	$users = array();
	if ($not_mailed) $add = ' WHERE ue.mail = 0';
	$result =db_query('SELECT u.name, u.uid from {users} u JOIN {user_import_extra} ue ON u.uid = ue.uid' . $add);
	while ($u = db_fetch_object($result)) {
		$users[] = $u;
	}
	return $users; 
}

function user_import_extra_remove_uids($uids) {
	if (!is_array($uids)) $uids=array($uids);
	db_query('DELETE FROM {user_import_extra} WHERE uid IN ('.db_placeholders($uids).')',$uids);
}

function user_import_extra_check_uids($uids, $not_mailed = true) {
	if ($not_mailed) $add = ' AND mail = 0';
	if (is_array($uids) && count($uids)) {
		$result = db_query('SELECT uid from {user_import_extra} WHERE uid IN ('.db_placeholders($uids).') '. $add,$uids);
		while ($us = db_fetch_object($result)) $uids_new[] = $us->uid; 
		return $uids_new;
	}
	elseif(is_numeric($uids)){
	 	$result = db_query('SELECT uid from {user_import_extra} WHERE uid = '.db_placeholders($uids) .  $add,array($uids));
		if (db_fetch_object($result)) return true;
	}
	return false;  
}

function user_import_extra_check_usernames($usernames, $not_mailed = true) {
	if ($not_mailed) $add = ' AND ue.mail = 0';
	if (is_array($usernames)) $result = db_query('SELECT * from {users} u JOIN {user_import_extra} ue ON u.uid = ue.uid WHERE u.name IN ('. 
		db_placeholders($usernames,'varchar').') ' . $add,$usernames);
	elseif($usernames) $result = db_query('SELECT * from {users} u JOIN {user_import_extra} ue ON u.uid = ue.uid WHERE u.name = '. 
		db_placeholders($usernames,'varchar') . $add,array($usernames));
	if (db_fetch_object($result)) return true;
	return false;  
}